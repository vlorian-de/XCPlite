name: XCPlite Default

on:
  workflow_dispatch:
  push:
    branches: ["**"]
    tags: ["**"]

concurrency:
  group: ${{ (github.ref == 'refs/heads/master') && 'master' || format('{0}-{1}', github.workflow, github.ref) }} # concurrency does not include master branch
  cancel-in-progress: true

jobs:
  #####################################################################################################################
  #                                                                                                                   #
  #   Static Code Analysis                                                                                             #
  #                                                                                                                   #
  #####################################################################################################################
  static_code_analysis:
    name: Static Code Analysis
    runs-on: [ubuntu-22.04]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Check for unresolved merge conflicts
        run: |
          ./.github/workflows/check-for-merge-conflicts.sh
        # continue-on-error: true

      - name: Check for syntax and types
        run: |
          ./.github/workflows/check-for-syntax-and-types.sh
        # continue-on-error: true

      # this is needed to ensure that the pipeline fails if any of the previous steps failed
      # - name: Check for any previous step failure
      #   if: ${{ always() }}
      #   run: |
      #     if [ "${{ job.status }}" != "success" ]; then
      #       echo "Failing the job because one or more steps failed"
      #       exit 1
      #     fi


  #####################################################################################################################
  #                                                                                                                   #
  #   Build on Linux                                                                                                   #
  #                                                                                                                   #
  #####################################################################################################################
  build_on_linux:
    name: Build on Linux
    runs-on: [ubuntu-22.04]
    needs: [static_code_analysis]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Build Tools
        run: |
          sudo apt-get install cmake g++ clang ninja-build
      
      - name: Build XCPlite
        run: |
          cd C_Demo
          cmake -DCMAKE_BUILD_TYPE=Release -S . -B build
          cd build
          make
      - name: C_Demo - Provide Build Artifacts (Linux)
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: C_Demo build artifacts (Linux)
          path: ./C_Demo/build/*.*


  #####################################################################################################################
  #                                                                                                                   #
  #   Build on Mac                                                                                                   #
  #                                                                                                                   #
  #####################################################################################################################
  build_on_mac:
    name: Build on Mac
    runs-on: [macos-13]
    needs: [static_code_analysis]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Build Tools
        run:
          brew install cmake gcc
      
      - name: Build XCPlite
        run: |
          cd C_Demo
          cmake -DCMAKE_BUILD_TYPE=Release -S . -B build  
          cd build
          make
      - name: C_Demo - Provide Build Artifacts (MacOS)
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: C_Demo build artifacts (MacOS)
          path: ./C_Demo/build/*.*